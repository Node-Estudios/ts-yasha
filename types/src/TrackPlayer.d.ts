export = TrackPlayer;
declare class TrackPlayer extends EventEmitter {
    constructor(options: any);
    normalize_volume: any;
    external_encrypt: any;
    external_packet_send: any;
    last_error: number;
    track: any;
    stream: any;
    subscriptions: any[];
    play_id: number;
    silence_frames_interval: any;
    silence_frames_left: number;
    silence_frames_needed: boolean;
    onstatechange(old: any, cur: any): void;
    player: any;
    subscribe(connection: any): Subscription;
    unsubscribe(subscription: any): void;
    unsubscribe_all(): void;
    onpacket(packet: any, length: any, frame_size: any): void;
    onfinish(): void;
    onerror(error: any, code: any, retryable: any): void;
    secretbox_ready(): any;
    get_connection(): any;
    get_connection_data(): any;
    get_connection_udp(): any;
    init_secretbox(): void;
    create_player(start_time: any): void;
    load_streams(): Promise<boolean>;
    send(buffer: any, frame_size: any, is_silence: any): void;
    start_silence_frames(): void;
    stop_silence_frames(): void;
    error(error: any, retryable: any): boolean;
    get_best_stream_one(streams: any): any;
    get_best_stream(streams: any): any;
    play(track: any): void;
    start(): Promise<void>;
    check_destroyed(): void;
    hasPlayer(): boolean;
    isPaused(): any;
    setPaused(paused: any): any;
    setVolume(volume: any): any;
    setBitrate(bitrate: any): any;
    setRate(rate: any): any;
    setTempo(tempo: any): any;
    setTremolo(depth: any, rate: any): any;
    setEqualizer(eqs: any): any;
    seek(time: any): any;
    getTime(): any;
    getDuration(): any;
    getFramesDropped(): any;
    getTotalFrames(): any;
    isCodecCopy(): any;
    stop(): any;
    destroy_player(): void;
    cleanup(): void;
    destroy(): void;
}
import EventEmitter = require("events");
declare class Subscription {
    constructor(connection: any, player: any);
    connection: any;
    player: any;
    unsubscribe(): void;
}
