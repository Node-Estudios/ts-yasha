/// <reference types="discord.js" />
export = TrackPlayer;
declare class TrackPlayer extends EventEmitter {
    constructor(options?: {
        normalize_volume: boolean;
        external_encrypt: boolean;
        external_packet_send: boolean;
    } | undefined);
    normalize_volume: boolean;
    external_encrypt: boolean;
    external_packet_send: boolean;
    last_error: number;
    track: Awaited<ReturnType<typeof import('./Source').resolve>> | null;
    stream: unknown;
    subscriptions: Subscription[];
    play_id: number;
    silence_frames_interval: number | null;
    silence_frames_left: number;
    silence_frames_needed: boolean;
    player: AudioPlayer;
    onstatechange(old: any, cur: any): void;
    subscribe(connection: any): Subscription;
    unsubscribe(subscription: Subscription): void;
    unsubscribe_all(): void;
    onpacket(packet: any, length: number, frame_size: number): void;
    onfinish(): void;
    onerror(error: any, code: any, retryable: any): void;
    secretbox_ready(): boolean | 0;
    get_connection(): VoiceConnection;
    get_connection_data(): any;
    get_connection_udp(): any;
    init_secretbox(): void;
    create_player(start_time: number): void;
    load_streams(): Promise<boolean>;
    send(buffer: Buffer, frame_size?: number | undefined, is_silence?: boolean | undefined): void;
    start_silence_frames(): void;
    stop_silence_frames(): void;
    error(error: Error, retryable?: boolean | undefined): boolean;
    get_best_stream_one(streams: TrackStreams): any;
    get_best_stream(streams: TrackStream): any;
    play(track: import('./Track').Track<any>): void;
    start(): Promise<void>;
    check_destroyed(): void;
    hasPlayer(): boolean;
    isPaused(): any;
    setPaused(paused: boolean): any;
    setVolume(volume: number): any;
    setBitrate(bitrate: number): any;
    setRate(rate: number): any;
    setTempo(tempo: any): any;
    setTremolo(depth: any, rate: number): any;
    setEqualizer(eqs: any): any;
    seek(time: number): any;
    getTime(): any;
    getDuration(): any;
    getFramesDropped(): any;
    getTotalFrames(): any;
    isCodecCopy(): any;
    stop(): any;
    destroy_player(): void;
    cleanup(): void;
    destroy(): void;
}
import EventEmitter = require("node:events");
declare class Subscription {
    constructor(connection: VoiceConnection, player: TrackPlayer);
    connection: VoiceConnection;
    player: TrackPlayer;
    unsubscribe(): void;
}
import VoiceConnection = require("./VoiceConnection");
import { TrackStreams } from "./Track";
import { TrackStream } from "./Track";
