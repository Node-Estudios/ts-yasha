export namespace api {
    let Youtube: {
        Track: typeof import("./src/api/Youtube").Track;
        Results: typeof import("./src/api/Youtube").Results;
        Playlist: typeof import("./src/api/Youtube").Playlist;
        Music: {
            innertube_client: {
                clientName: string;
                clientVersion: string;
                gl: string;
                hl: string;
            };
            innertube_key: string;
            readonly cookie: string;
            readonly sapisid: string;
            api_request(path: any, body: any, query: any): Promise<{
                [key: string]: any;
            }>;
            search(search: any, continuation: any, params: any): Promise<{
                [n: number]: any;
                process(body: any): void;
                process_section(section: any): void;
                top_result: any;
                songs: any[] | undefined;
                from_section(list: any): any[];
                process_once(body: any): void;
                extract_tracks(list: any): void;
                set_continuation(cont: any): void;
                continuation: any;
                set_browse(query: any, params: any): void;
                browse: any;
                query: any;
                next(): Promise<any | null>;
                length: number;
                toString(): string;
                toLocaleString(): string;
                pop(): any;
                push(...items: any[]): number;
                concat(...items: ConcatArray<any>[]): any[];
                concat(...items: any[]): any[];
                join(separator?: string | undefined): string;
                reverse(): any[];
                shift(): any;
                slice(start?: number | undefined, end?: number | undefined): any[];
                sort(compareFn?: ((a: any, b: any) => number) | undefined): any;
                splice(start: number, deleteCount?: number | undefined): any[];
                splice(start: number, deleteCount: number, ...items: any[]): any[];
                unshift(...items: any[]): number;
                indexOf(searchElement: any, fromIndex?: number | undefined): number;
                lastIndexOf(searchElement: any, fromIndex?: number | undefined): number;
                every<S extends any>(predicate: (value: any, index: number, array: any[]) => value is S, thisArg?: any): this is S[];
                every(predicate: (value: any, index: number, array: any[]) => unknown, thisArg?: any): boolean;
                some(predicate: (value: any, index: number, array: any[]) => unknown, thisArg?: any): boolean;
                forEach(callbackfn: (value: any, index: number, array: any[]) => void, thisArg?: any): void;
                map<U>(callbackfn: (value: any, index: number, array: any[]) => U, thisArg?: any): U[];
                filter<S_1 extends any>(predicate: (value: any, index: number, array: any[]) => value is S_1, thisArg?: any): S_1[];
                filter(predicate: (value: any, index: number, array: any[]) => unknown, thisArg?: any): any[];
                reduce(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any): any;
                reduce(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any, initialValue: any): any;
                reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: any, currentIndex: number, array: any[]) => U_1, initialValue: U_1): U_1;
                reduceRight(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any): any;
                reduceRight(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any, initialValue: any): any;
                reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: any, currentIndex: number, array: any[]) => U_2, initialValue: U_2): U_2;
                find<S_2 extends any>(predicate: (value: any, index: number, obj: any[]) => value is S_2, thisArg?: any): S_2 | undefined;
                find(predicate: (value: any, index: number, obj: any[]) => unknown, thisArg?: any): any;
                findIndex(predicate: (value: any, index: number, obj: any[]) => unknown, thisArg?: any): number;
                fill(value: any, start?: number | undefined, end?: number | undefined): any;
                copyWithin(target: number, start?: number | undefined, end?: number | undefined): any;
                entries(): IterableIterator<[number, any]>;
                keys(): IterableIterator<number>;
                values(): IterableIterator<any>;
                includes(searchElement: any, fromIndex?: number | undefined): boolean;
                flatMap<U_3, This = undefined>(callback: (this: This, value: any, index: number, array: any[]) => U_3 | readonly U_3[], thisArg?: This | undefined): U_3[];
                flat<A, D extends number = 1>(this: A, depth?: D | undefined): FlatArray<A, D>[];
                [Symbol.iterator](): IterableIterator<any>;
                readonly [Symbol.unscopables]: {
                    [x: number]: boolean | undefined;
                    length?: boolean | undefined;
                    toString?: boolean | undefined;
                    toLocaleString?: boolean | undefined;
                    pop?: boolean | undefined;
                    push?: boolean | undefined;
                    concat?: boolean | undefined;
                    join?: boolean | undefined;
                    reverse?: boolean | undefined;
                    shift?: boolean | undefined;
                    slice?: boolean | undefined;
                    sort?: boolean | undefined;
                    splice?: boolean | undefined;
                    unshift?: boolean | undefined;
                    indexOf?: boolean | undefined;
                    lastIndexOf?: boolean | undefined;
                    every?: boolean | undefined;
                    some?: boolean | undefined;
                    forEach?: boolean | undefined;
                    map?: boolean | undefined;
                    filter?: boolean | undefined;
                    reduce?: boolean | undefined;
                    reduceRight?: boolean | undefined;
                    find?: boolean | undefined;
                    findIndex?: boolean | undefined;
                    fill?: boolean | undefined;
                    copyWithin?: boolean | undefined;
                    entries?: boolean | undefined;
                    keys?: boolean | undefined;
                    values?: boolean | undefined;
                    includes?: boolean | undefined;
                    flatMap?: boolean | undefined;
                    flat?: boolean | undefined;
                    [Symbol.iterator]?: boolean | undefined;
                    readonly [Symbol.unscopables]?: boolean | undefined;
                    at?: boolean | undefined;
                };
                at(index: number): any;
            }>;
        };
        innertube_client: {
            clientName: string;
            clientVersion: string;
            gl: string;
            hl: string;
        };
        innertube_key: string;
        cookie: string;
        sapisid: string;
        api_request(path: string, body?: {
            [key: string]: any;
        } | undefined, query?: string | undefined, origin?: string | undefined): Promise<{
            [key: string]: any;
        }>;
        get(id: string): Promise<import("./src/api/Youtube").Track>;
        get_streams(id: string): Promise<{
            [n: number]: any;
            from(start: any, playerResponse: any): any;
            expire: any;
            expired(): boolean;
            extract_streams(streams: any, adaptive: any): void;
            set(volume: number, live: any, time: number): void;
            volume: number | undefined;
            live: any;
            time: number | undefined;
            maybeExpired(): boolean;
            length: number;
            toString(): string;
            toLocaleString(): string;
            pop(): any;
            push(...items: any[]): number;
            concat(...items: ConcatArray<any>[]): any[];
            concat(...items: any[]): any[];
            join(separator?: string | undefined): string;
            reverse(): any[];
            shift(): any;
            slice(start?: number | undefined, end?: number | undefined): any[];
            sort(compareFn?: ((a: any, b: any) => number) | undefined): any;
            splice(start: number, deleteCount?: number | undefined): any[];
            splice(start: number, deleteCount: number, ...items: any[]): any[];
            unshift(...items: any[]): number;
            indexOf(searchElement: any, fromIndex?: number | undefined): number;
            lastIndexOf(searchElement: any, fromIndex?: number | undefined): number;
            every<S_3 extends any>(predicate: (value: any, index: number, array: any[]) => value is S_3, thisArg?: any): this is S_3[];
            every(predicate: (value: any, index: number, array: any[]) => unknown, thisArg?: any): boolean;
            some(predicate: (value: any, index: number, array: any[]) => unknown, thisArg?: any): boolean;
            forEach(callbackfn: (value: any, index: number, array: any[]) => void, thisArg?: any): void;
            map<U_4>(callbackfn: (value: any, index: number, array: any[]) => U_4, thisArg?: any): U_4[];
            filter<S_4 extends any>(predicate: (value: any, index: number, array: any[]) => value is S_4, thisArg?: any): S_4[];
            filter(predicate: (value: any, index: number, array: any[]) => unknown, thisArg?: any): any[];
            reduce(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any): any;
            reduce(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any, initialValue: any): any;
            reduce<U_5>(callbackfn: (previousValue: U_5, currentValue: any, currentIndex: number, array: any[]) => U_5, initialValue: U_5): U_5;
            reduceRight(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any): any;
            reduceRight(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any, initialValue: any): any;
            reduceRight<U_6>(callbackfn: (previousValue: U_6, currentValue: any, currentIndex: number, array: any[]) => U_6, initialValue: U_6): U_6;
            find<S_5 extends any>(predicate: (value: any, index: number, obj: any[]) => value is S_5, thisArg?: any): S_5 | undefined;
            find(predicate: (value: any, index: number, obj: any[]) => unknown, thisArg?: any): any;
            findIndex(predicate: (value: any, index: number, obj: any[]) => unknown, thisArg?: any): number;
            fill(value: any, start?: number | undefined, end?: number | undefined): any;
            copyWithin(target: number, start?: number | undefined, end?: number | undefined): any;
            entries(): IterableIterator<[number, any]>;
            keys(): IterableIterator<number>;
            values(): IterableIterator<any>;
            includes(searchElement: any, fromIndex?: number | undefined): boolean;
            flatMap<U_7, This_1 = undefined>(callback: (this: This_1, value: any, index: number, array: any[]) => U_7 | readonly U_7[], thisArg?: This_1 | undefined): U_7[];
            flat<A_1, D_1 extends number = 1>(this: A_1, depth?: D_1 | undefined): FlatArray<A_1, D_1>[];
            [Symbol.iterator](): IterableIterator<any>;
            readonly [Symbol.unscopables]: {
                [x: number]: boolean | undefined;
                length?: boolean | undefined;
                toString?: boolean | undefined;
                toLocaleString?: boolean | undefined;
                pop?: boolean | undefined;
                push?: boolean | undefined;
                concat?: boolean | undefined;
                join?: boolean | undefined;
                reverse?: boolean | undefined;
                shift?: boolean | undefined;
                slice?: boolean | undefined;
                sort?: boolean | undefined;
                splice?: boolean | undefined;
                unshift?: boolean | undefined;
                indexOf?: boolean | undefined;
                lastIndexOf?: boolean | undefined;
                every?: boolean | undefined;
                some?: boolean | undefined;
                forEach?: boolean | undefined;
                map?: boolean | undefined;
                filter?: boolean | undefined;
                reduce?: boolean | undefined;
                reduceRight?: boolean | undefined;
                find?: boolean | undefined;
                findIndex?: boolean | undefined;
                fill?: boolean | undefined;
                copyWithin?: boolean | undefined;
                entries?: boolean | undefined;
                keys?: boolean | undefined;
                values?: boolean | undefined;
                includes?: boolean | undefined;
                flatMap?: boolean | undefined;
                flat?: boolean | undefined;
                [Symbol.iterator]?: boolean | undefined;
                readonly [Symbol.unscopables]?: boolean | undefined;
                at?: boolean | undefined;
            };
            at(index: number): any;
        }>;
        playlist_once(id: any, start?: number): Promise<import("./src/api/Youtube").Playlist>;
        playlist(id: string, limit?: number | undefined): Promise<import("./src/api/Youtube").Playlist>;
        search(query: unknown, continuation?: unknown): Promise<import("./src/api/Youtube").Results>;
        set_cookie(cookiestr: string): void;
        string_word_match(big: string, small: string): number;
        track_match_score(track: any, result: any): number;
        track_match_best(results: any, track: any): any;
        track_match_best_result(results: any, track: any): any;
        track_match_lookup(track: any): Promise<any>;
        track_match(track: any): Promise<{
            [n: number]: any;
            from(start: any, playerResponse: any): any;
            expire: any;
            expired(): boolean;
            extract_streams(streams: any, adaptive: any): void;
            set(volume: number, live: any, time: number): void;
            volume: number | undefined;
            live: any;
            time: number | undefined;
            maybeExpired(): boolean;
            length: number;
            toString(): string;
            toLocaleString(): string;
            pop(): any;
            push(...items: any[]): number;
            concat(...items: ConcatArray<any>[]): any[];
            concat(...items: any[]): any[];
            join(separator?: string | undefined): string;
            reverse(): any[];
            shift(): any;
            slice(start?: number | undefined, end?: number | undefined): any[];
            sort(compareFn?: ((a: any, b: any) => number) | undefined): any;
            splice(start: number, deleteCount?: number | undefined): any[];
            splice(start: number, deleteCount: number, ...items: any[]): any[];
            unshift(...items: any[]): number;
            indexOf(searchElement: any, fromIndex?: number | undefined): number;
            lastIndexOf(searchElement: any, fromIndex?: number | undefined): number;
            every<S_3 extends any>(predicate: (value: any, index: number, array: any[]) => value is S_3, thisArg?: any): this is S_3[];
            every(predicate: (value: any, index: number, array: any[]) => unknown, thisArg?: any): boolean;
            some(predicate: (value: any, index: number, array: any[]) => unknown, thisArg?: any): boolean;
            forEach(callbackfn: (value: any, index: number, array: any[]) => void, thisArg?: any): void;
            map<U_4>(callbackfn: (value: any, index: number, array: any[]) => U_4, thisArg?: any): U_4[];
            filter<S_4 extends any>(predicate: (value: any, index: number, array: any[]) => value is S_4, thisArg?: any): S_4[];
            filter(predicate: (value: any, index: number, array: any[]) => unknown, thisArg?: any): any[];
            reduce(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any): any;
            reduce(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any, initialValue: any): any;
            reduce<U_5>(callbackfn: (previousValue: U_5, currentValue: any, currentIndex: number, array: any[]) => U_5, initialValue: U_5): U_5;
            reduceRight(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any): any;
            reduceRight(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any, initialValue: any): any;
            reduceRight<U_6>(callbackfn: (previousValue: U_6, currentValue: any, currentIndex: number, array: any[]) => U_6, initialValue: U_6): U_6;
            find<S_5 extends any>(predicate: (value: any, index: number, obj: any[]) => value is S_5, thisArg?: any): S_5 | undefined;
            find(predicate: (value: any, index: number, obj: any[]) => unknown, thisArg?: any): any;
            findIndex(predicate: (value: any, index: number, obj: any[]) => unknown, thisArg?: any): number;
            fill(value: any, start?: number | undefined, end?: number | undefined): any;
            copyWithin(target: number, start?: number | undefined, end?: number | undefined): any;
            entries(): IterableIterator<[number, any]>;
            keys(): IterableIterator<number>;
            values(): IterableIterator<any>;
            includes(searchElement: any, fromIndex?: number | undefined): boolean;
            flatMap<U_7, This_1 = undefined>(callback: (this: This_1, value: any, index: number, array: any[]) => U_7 | readonly U_7[], thisArg?: This_1 | undefined): U_7[];
            flat<A_1, D_1 extends number = 1>(this: A_1, depth?: D_1 | undefined): FlatArray<A_1, D_1>[];
            [Symbol.iterator](): IterableIterator<any>;
            readonly [Symbol.unscopables]: {
                [x: number]: boolean | undefined;
                length?: boolean | undefined;
                toString?: boolean | undefined;
                toLocaleString?: boolean | undefined;
                pop?: boolean | undefined;
                push?: boolean | undefined;
                concat?: boolean | undefined;
                join?: boolean | undefined;
                reverse?: boolean | undefined;
                shift?: boolean | undefined;
                slice?: boolean | undefined;
                sort?: boolean | undefined;
                splice?: boolean | undefined;
                unshift?: boolean | undefined;
                indexOf?: boolean | undefined;
                lastIndexOf?: boolean | undefined;
                every?: boolean | undefined;
                some?: boolean | undefined;
                forEach?: boolean | undefined;
                map?: boolean | undefined;
                filter?: boolean | undefined;
                reduce?: boolean | undefined;
                reduceRight?: boolean | undefined;
                find?: boolean | undefined;
                findIndex?: boolean | undefined;
                fill?: boolean | undefined;
                copyWithin?: boolean | undefined;
                entries?: boolean | undefined;
                keys?: boolean | undefined;
                values?: boolean | undefined;
                includes?: boolean | undefined;
                flatMap?: boolean | undefined;
                flat?: boolean | undefined;
                [Symbol.iterator]?: boolean | undefined;
                readonly [Symbol.unscopables]?: boolean | undefined;
                at?: boolean | undefined;
            };
            at(index: number): any;
        }>;
    };
    let Soundcloud: {
        Track: typeof import("./src/api/Soundcloud").Track;
        Results: typeof import("./src/api/Soundcloud").Results;
        Playlist: typeof import("./src/api/Soundcloud").Playlist;
        client_id: string | null;
        reloading: Promise<void> | null;
        reload(): Promise<void>;
        prefetch(): Promise<void>;
        load(): Promise<void>;
        request(path: string, query?: {
            [key: string]: string | null;
        } | undefined): Promise<any>;
        api_request(path: string, query?: {
            [key: string]: any;
        } | undefined): Promise<any>;
        resolve_playlist(list: {
            tracks: {
                id: string;
                streamable: boolean;
            }[];
            permalink_url: string;
            title: string;
            description: string;
            id: string;
        }, offset: number | undefined, limit: number): Promise<import("./src/api/Soundcloud").Playlist | null>;
        resolve(url: string): Promise<import("./src/api/Soundcloud").Track | import("./src/api/Soundcloud").Playlist | null>;
        resolve_shortlink(id: string): Promise<import("./src/api/Soundcloud").Track | import("./src/api/Soundcloud").Playlist | null>;
        check_valid_id(id: string): void;
        get(id: string): Promise<import("./src/api/Soundcloud").Track | import("./src/api/Soundcloud").Playlist | null>;
        get_streams(id: string): Promise<{
            [n: number]: any;
            from(track: {
                media: {
                    transcodings: {
                        format: {
                            mime_type: string;
                        };
                        url: string;
                        duration: number;
                    }[];
                };
            }): any;
            extract_streams(streams: {
                format: {
                    mime_type: string;
                };
                url: string;
                duration: number;
            }[]): void;
            expired(): boolean;
            maybeExpired(): boolean;
            set(volume: number, live: any, time: number): void;
            volume: number | undefined;
            live: any;
            time: number | undefined;
            length: number;
            toString(): string;
            toLocaleString(): string;
            pop(): any;
            push(...items: any[]): number;
            concat(...items: ConcatArray<any>[]): any[];
            concat(...items: any[]): any[];
            join(separator?: string | undefined): string;
            reverse(): any[];
            shift(): any;
            slice(start?: number | undefined, end?: number | undefined): any[];
            sort(compareFn?: ((a: any, b: any) => number) | undefined): any;
            splice(start: number, deleteCount?: number | undefined): any[];
            splice(start: number, deleteCount: number, ...items: any[]): any[];
            unshift(...items: any[]): number;
            indexOf(searchElement: any, fromIndex?: number | undefined): number;
            lastIndexOf(searchElement: any, fromIndex?: number | undefined): number;
            every<S extends any>(predicate: (value: any, index: number, array: any[]) => value is S, thisArg?: any): this is S[];
            every(predicate: (value: any, index: number, array: any[]) => unknown, thisArg?: any): boolean;
            some(predicate: (value: any, index: number, array: any[]) => unknown, thisArg?: any): boolean;
            forEach(callbackfn: (value: any, index: number, array: any[]) => void, thisArg?: any): void;
            map<U>(callbackfn: (value: any, index: number, array: any[]) => U, thisArg?: any): U[];
            filter<S_1 extends any>(predicate: (value: any, index: number, array: any[]) => value is S_1, thisArg?: any): S_1[];
            filter(predicate: (value: any, index: number, array: any[]) => unknown, thisArg?: any): any[];
            reduce(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any): any;
            reduce(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any, initialValue: any): any;
            reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: any, currentIndex: number, array: any[]) => U_1, initialValue: U_1): U_1;
            reduceRight(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any): any;
            reduceRight(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any, initialValue: any): any;
            reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: any, currentIndex: number, array: any[]) => U_2, initialValue: U_2): U_2;
            find<S_2 extends any>(predicate: (value: any, index: number, obj: any[]) => value is S_2, thisArg?: any): S_2 | undefined;
            find(predicate: (value: any, index: number, obj: any[]) => unknown, thisArg?: any): any;
            findIndex(predicate: (value: any, index: number, obj: any[]) => unknown, thisArg?: any): number;
            fill(value: any, start?: number | undefined, end?: number | undefined): any;
            copyWithin(target: number, start?: number | undefined, end?: number | undefined): any;
            entries(): IterableIterator<[number, any]>;
            keys(): IterableIterator<number>;
            values(): IterableIterator<any>;
            includes(searchElement: any, fromIndex?: number | undefined): boolean;
            flatMap<U_3, This = undefined>(callback: (this: This, value: any, index: number, array: any[]) => U_3 | readonly U_3[], thisArg?: This | undefined): U_3[];
            flat<A, D extends number = 1>(this: A, depth?: D | undefined): FlatArray<A, D>[];
            [Symbol.iterator](): IterableIterator<any>;
            readonly [Symbol.unscopables]: {
                [x: number]: boolean | undefined;
                length?: boolean | undefined;
                toString?: boolean | undefined;
                toLocaleString?: boolean | undefined;
                pop?: boolean | undefined;
                push?: boolean | undefined;
                concat?: boolean | undefined;
                join?: boolean | undefined;
                reverse?: boolean | undefined;
                shift?: boolean | undefined;
                slice?: boolean | undefined;
                sort?: boolean | undefined;
                splice?: boolean | undefined;
                unshift?: boolean | undefined;
                indexOf?: boolean | undefined;
                lastIndexOf?: boolean | undefined;
                every?: boolean | undefined;
                some?: boolean | undefined;
                forEach?: boolean | undefined;
                map?: boolean | undefined;
                filter?: boolean | undefined;
                reduce?: boolean | undefined;
                reduceRight?: boolean | undefined;
                find?: boolean | undefined;
                findIndex?: boolean | undefined;
                fill?: boolean | undefined;
                copyWithin?: boolean | undefined;
                entries?: boolean | undefined;
                keys?: boolean | undefined;
                values?: boolean | undefined;
                includes?: boolean | undefined;
                flatMap?: boolean | undefined;
                flat?: boolean | undefined;
                [Symbol.iterator]?: boolean | undefined;
                readonly [Symbol.unscopables]?: boolean | undefined;
                at?: boolean | undefined;
            };
            at(index: number): any;
        }>;
        search(query: string, offset: number, limit?: number | undefined): Promise<import("./src/api/Soundcloud").Results>;
        playlist_once(id: string, offset?: number | undefined, limit?: number | undefined): Promise<import("./src/api/Soundcloud").Playlist | null>;
        playlist(id: string, limit?: number | undefined): Promise<import("./src/api/Soundcloud").Playlist | null>;
    };
    let Spotify: {
        Track: typeof import("./src/api/Spotify").Track;
        Results: typeof import("./src/api/Spotify").Results;
        Playlist: typeof import("./src/api/Spotify").Playlist;
        token: any;
        reloading: Promise<void> | null;
        needs_reload: boolean;
        account_data: {};
        reload(force: any): Promise<void>;
        load(): Promise<void>;
        prefetch(): Promise<void> | undefined;
        api_request(path: any, options?: {}): Promise<any>;
        check_valid_id(id: any): void;
        get(id: any): Promise<import("./src/api/Spotify").Track>;
        get_streams(id: any): Promise<{
            [n: number]: any;
            from(start: any, playerResponse: any): any;
            expire: any;
            expired(): boolean;
            extract_streams(streams: any, adaptive: any): void;
            set(volume: number, live: any, time: number): void;
            volume: number | undefined;
            live: any;
            time: number | undefined;
            maybeExpired(): boolean;
            length: number;
            toString(): string;
            toLocaleString(): string;
            pop(): any;
            push(...items: any[]): number;
            concat(...items: ConcatArray<any>[]): any[];
            concat(...items: any[]): any[];
            join(separator?: string | undefined): string;
            reverse(): any[];
            shift(): any;
            slice(start?: number | undefined, end?: number | undefined): any[];
            sort(compareFn?: ((a: any, b: any) => number) | undefined): any;
            splice(start: number, deleteCount?: number | undefined): any[];
            splice(start: number, deleteCount: number, ...items: any[]): any[];
            unshift(...items: any[]): number;
            indexOf(searchElement: any, fromIndex?: number | undefined): number;
            lastIndexOf(searchElement: any, fromIndex?: number | undefined): number;
            every<S extends any>(predicate: (value: any, index: number, array: any[]) => value is S, thisArg?: any): this is S[];
            every(predicate: (value: any, index: number, array: any[]) => unknown, thisArg?: any): boolean;
            some(predicate: (value: any, index: number, array: any[]) => unknown, thisArg?: any): boolean;
            forEach(callbackfn: (value: any, index: number, array: any[]) => void, thisArg?: any): void;
            map<U>(callbackfn: (value: any, index: number, array: any[]) => U, thisArg?: any): U[];
            filter<S_1 extends any>(predicate: (value: any, index: number, array: any[]) => value is S_1, thisArg?: any): S_1[];
            filter(predicate: (value: any, index: number, array: any[]) => unknown, thisArg?: any): any[];
            reduce(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any): any;
            reduce(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any, initialValue: any): any;
            reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: any, currentIndex: number, array: any[]) => U_1, initialValue: U_1): U_1;
            reduceRight(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any): any;
            reduceRight(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any, initialValue: any): any;
            reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: any, currentIndex: number, array: any[]) => U_2, initialValue: U_2): U_2;
            find<S_2 extends any>(predicate: (value: any, index: number, obj: any[]) => value is S_2, thisArg?: any): S_2 | undefined;
            find(predicate: (value: any, index: number, obj: any[]) => unknown, thisArg?: any): any;
            findIndex(predicate: (value: any, index: number, obj: any[]) => unknown, thisArg?: any): number;
            fill(value: any, start?: number | undefined, end?: number | undefined): any;
            copyWithin(target: number, start?: number | undefined, end?: number | undefined): any;
            entries(): IterableIterator<[number, any]>;
            keys(): IterableIterator<number>;
            values(): IterableIterator<any>;
            includes(searchElement: any, fromIndex?: number | undefined): boolean;
            flatMap<U_3, This = undefined>(callback: (this: This, value: any, index: number, array: any[]) => U_3 | readonly U_3[], thisArg?: This | undefined): U_3[];
            flat<A, D extends number = 1>(this: A, depth?: D | undefined): FlatArray<A, D>[];
            [Symbol.iterator](): IterableIterator<any>;
            readonly [Symbol.unscopables]: {
                [x: number]: boolean | undefined;
                length?: boolean | undefined;
                toString?: boolean | undefined;
                toLocaleString?: boolean | undefined;
                pop?: boolean | undefined;
                push?: boolean | undefined;
                concat?: boolean | undefined;
                join?: boolean | undefined;
                reverse?: boolean | undefined;
                shift?: boolean | undefined;
                slice?: boolean | undefined;
                sort?: boolean | undefined;
                splice?: boolean | undefined;
                unshift?: boolean | undefined;
                indexOf?: boolean | undefined;
                lastIndexOf?: boolean | undefined;
                every?: boolean | undefined;
                some?: boolean | undefined;
                forEach?: boolean | undefined;
                map?: boolean | undefined;
                filter?: boolean | undefined;
                reduce?: boolean | undefined;
                reduceRight?: boolean | undefined;
                find?: boolean | undefined;
                findIndex?: boolean | undefined;
                fill?: boolean | undefined;
                copyWithin?: boolean | undefined;
                entries?: boolean | undefined;
                keys?: boolean | undefined;
                values?: boolean | undefined;
                includes?: boolean | undefined;
                flatMap?: boolean | undefined;
                flat?: boolean | undefined;
                [Symbol.iterator]?: boolean | undefined;
                readonly [Symbol.unscopables]?: boolean | undefined;
                at?: boolean | undefined;
            };
            at(index: number): any;
        }>;
        search(query: any, start?: number, length?: number): Promise<import("./src/api/Spotify").Results>;
        list_once(type: string, id: string, start?: number | undefined, length?: number | undefined): Promise<import("./src/api/Spotify").Playlist>;
        playlist_once(id: string, start?: number | undefined, length?: number | undefined): Promise<import("./src/api/Spotify").Playlist>;
        album_once(id: string, start?: number | undefined, length?: number | undefined): Promise<import("./src/api/Spotify").Playlist>;
        list(type: any, id: string, limit?: number | undefined): Promise<import("./src/api/Spotify").Playlist>;
        playlist(id: string, length?: number | undefined): Promise<import("./src/api/Spotify").Playlist>;
        album(id: string, length?: number | undefined): Promise<import("./src/api/Spotify").Playlist>;
        set_cookie(cookie: string): void;
    };
}
export let Source: typeof import("./src/Source");
export let Track: typeof import("./src/Track");
export let TrackPlayer: typeof import("./src/TrackPlayer");
export let VoiceConnection: typeof import("./src/VoiceConnection");
